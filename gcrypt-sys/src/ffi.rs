// automatically generated by rust-bindgen 0.58.1

pub use gpgrt_sys::*;

pub const GCRYPT_VERSION: &'static [u8; 14usize] = b"1.9.3-unknown\0";
pub const GCRYPT_VERSION_NUMBER: i32 = 67843;
pub const GCRY_THREAD_OPTION_DEFAULT: i32 = 0;
pub const GCRY_THREAD_OPTION_USER: i32 = 1;
pub const GCRY_THREAD_OPTION_PTH: i32 = 2;
pub const GCRY_THREAD_OPTION_PTHREAD: i32 = 3;
pub const GCRY_THREAD_OPTION_VERSION: i32 = 1;
pub const GCRY_GCM_BLOCK_LEN: i32 = 16;
pub const GCRY_CCM_BLOCK_LEN: i32 = 16;
pub const GCRY_OCB_BLOCK_LEN: i32 = 16;
pub const GCRY_XTS_BLOCK_LEN: i32 = 16;
pub const GCRY_PK_USAGE_SIGN: i32 = 1;
pub const GCRY_PK_USAGE_ENCR: i32 = 2;
pub const GCRY_PK_USAGE_CERT: i32 = 4;
pub const GCRY_PK_USAGE_AUTH: i32 = 8;
pub const GCRY_PK_USAGE_UNKN: i32 = 128;
pub const GCRY_PK_GET_PUBKEY: i32 = 1;
pub const GCRY_PK_GET_SECKEY: i32 = 2;
pub const GCRY_PRIME_CHECK_AT_FINISH: i32 = 0;
pub const GCRY_PRIME_CHECK_AT_GOT_PRIME: i32 = 1;
pub const GCRY_PRIME_CHECK_AT_MAYBE_PRIME: i32 = 2;
pub const GCRY_PRIME_FLAG_SECRET: i32 = 1;
pub const GCRY_PRIME_FLAG_SPECIAL_FACTOR: i32 = 2;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
pub type socklen_t = __socklen_t;
pub type gcry_socklen_t = socklen_t;
pub type gcry_error_t = gpg_error_t;
pub use self::{gpg_err_code_t as gcry_err_code_t, gpg_err_source_t as gcry_err_source_t};
extern "C" {
  pub fn gcry_strerror(err: gcry_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_strsource(err: gcry_error_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_err_code_from_errno(err: ::std::os::raw::c_int) -> gcry_err_code_t;
}
extern "C" {
  pub fn gcry_err_code_to_errno(code: gcry_err_code_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_err_make_from_errno(
    source: gcry_err_source_t,
    err: ::std::os::raw::c_int,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_error_from_errno(err: ::std::os::raw::c_int) -> gcry_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_thread_cbs
{
  pub option: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_gcry_thread_cbs()
{
  assert_eq!(
    ::std::mem::size_of::<gcry_thread_cbs>(),
    4usize,
    concat!("Size of: ", stringify!(gcry_thread_cbs))
  );
  assert_eq!(
    ::std::mem::align_of::<gcry_thread_cbs>(),
    4usize,
    concat!("Alignment of ", stringify!(gcry_thread_cbs))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_thread_cbs>())).option as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_thread_cbs),
      "::",
      stringify!(option)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_context
{
  _unused: [u8; 0],
}
pub type gcry_ctx_t = *mut gcry_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_mpi
{
  _unused: [u8; 0],
}
pub type gcry_mpi_t = *mut gcry_mpi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_mpi_point
{
  _unused: [u8; 0],
}
pub type gcry_mpi_point_t = *mut gcry_mpi_point;
pub type GCRY_MPI = *mut gcry_mpi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_buffer_t
{
  pub size: usize,
  pub off: usize,
  pub len: usize,
  pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_gcry_buffer_t()
{
  assert_eq!(
    ::std::mem::size_of::<gcry_buffer_t>(),
    32usize,
    concat!("Size of: ", stringify!(gcry_buffer_t))
  );
  assert_eq!(
    ::std::mem::align_of::<gcry_buffer_t>(),
    8usize,
    concat!("Alignment of ", stringify!(gcry_buffer_t))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_buffer_t>())).size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_buffer_t),
      "::",
      stringify!(size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_buffer_t>())).off as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_buffer_t),
      "::",
      stringify!(off)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_buffer_t>())).len as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_buffer_t),
      "::",
      stringify!(len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_buffer_t>())).data as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_buffer_t),
      "::",
      stringify!(data)
    )
  );
}
extern "C" {
  pub fn gcry_check_version(
    req_version: *const ::std::os::raw::c_char,
  ) -> *const ::std::os::raw::c_char;
}
pub const GCRYCTL_CFB_SYNC: gcry_ctl_cmds = 3;
pub const GCRYCTL_RESET: gcry_ctl_cmds = 4;
pub const GCRYCTL_FINALIZE: gcry_ctl_cmds = 5;
pub const GCRYCTL_GET_KEYLEN: gcry_ctl_cmds = 6;
pub const GCRYCTL_GET_BLKLEN: gcry_ctl_cmds = 7;
pub const GCRYCTL_TEST_ALGO: gcry_ctl_cmds = 8;
pub const GCRYCTL_IS_SECURE: gcry_ctl_cmds = 9;
pub const GCRYCTL_GET_ASNOID: gcry_ctl_cmds = 10;
pub const GCRYCTL_ENABLE_ALGO: gcry_ctl_cmds = 11;
pub const GCRYCTL_DISABLE_ALGO: gcry_ctl_cmds = 12;
pub const GCRYCTL_DUMP_RANDOM_STATS: gcry_ctl_cmds = 13;
pub const GCRYCTL_DUMP_SECMEM_STATS: gcry_ctl_cmds = 14;
pub const GCRYCTL_GET_ALGO_NPKEY: gcry_ctl_cmds = 15;
pub const GCRYCTL_GET_ALGO_NSKEY: gcry_ctl_cmds = 16;
pub const GCRYCTL_GET_ALGO_NSIGN: gcry_ctl_cmds = 17;
pub const GCRYCTL_GET_ALGO_NENCR: gcry_ctl_cmds = 18;
pub const GCRYCTL_SET_VERBOSITY: gcry_ctl_cmds = 19;
pub const GCRYCTL_SET_DEBUG_FLAGS: gcry_ctl_cmds = 20;
pub const GCRYCTL_CLEAR_DEBUG_FLAGS: gcry_ctl_cmds = 21;
pub const GCRYCTL_USE_SECURE_RNDPOOL: gcry_ctl_cmds = 22;
pub const GCRYCTL_DUMP_MEMORY_STATS: gcry_ctl_cmds = 23;
pub const GCRYCTL_INIT_SECMEM: gcry_ctl_cmds = 24;
pub const GCRYCTL_TERM_SECMEM: gcry_ctl_cmds = 25;
pub const GCRYCTL_DISABLE_SECMEM_WARN: gcry_ctl_cmds = 27;
pub const GCRYCTL_SUSPEND_SECMEM_WARN: gcry_ctl_cmds = 28;
pub const GCRYCTL_RESUME_SECMEM_WARN: gcry_ctl_cmds = 29;
pub const GCRYCTL_DROP_PRIVS: gcry_ctl_cmds = 30;
pub const GCRYCTL_ENABLE_M_GUARD: gcry_ctl_cmds = 31;
pub const GCRYCTL_START_DUMP: gcry_ctl_cmds = 32;
pub const GCRYCTL_STOP_DUMP: gcry_ctl_cmds = 33;
pub const GCRYCTL_GET_ALGO_USAGE: gcry_ctl_cmds = 34;
pub const GCRYCTL_IS_ALGO_ENABLED: gcry_ctl_cmds = 35;
pub const GCRYCTL_DISABLE_INTERNAL_LOCKING: gcry_ctl_cmds = 36;
pub const GCRYCTL_DISABLE_SECMEM: gcry_ctl_cmds = 37;
pub const GCRYCTL_INITIALIZATION_FINISHED: gcry_ctl_cmds = 38;
pub const GCRYCTL_INITIALIZATION_FINISHED_P: gcry_ctl_cmds = 39;
pub const GCRYCTL_ANY_INITIALIZATION_P: gcry_ctl_cmds = 40;
pub const GCRYCTL_SET_CBC_CTS: gcry_ctl_cmds = 41;
pub const GCRYCTL_SET_CBC_MAC: gcry_ctl_cmds = 42;
pub const GCRYCTL_ENABLE_QUICK_RANDOM: gcry_ctl_cmds = 44;
pub const GCRYCTL_SET_RANDOM_SEED_FILE: gcry_ctl_cmds = 45;
pub const GCRYCTL_UPDATE_RANDOM_SEED_FILE: gcry_ctl_cmds = 46;
pub const GCRYCTL_SET_THREAD_CBS: gcry_ctl_cmds = 47;
pub const GCRYCTL_FAST_POLL: gcry_ctl_cmds = 48;
pub const GCRYCTL_SET_RANDOM_DAEMON_SOCKET: gcry_ctl_cmds = 49;
pub const GCRYCTL_USE_RANDOM_DAEMON: gcry_ctl_cmds = 50;
pub const GCRYCTL_FAKED_RANDOM_P: gcry_ctl_cmds = 51;
pub const GCRYCTL_SET_RNDEGD_SOCKET: gcry_ctl_cmds = 52;
pub const GCRYCTL_PRINT_CONFIG: gcry_ctl_cmds = 53;
pub const GCRYCTL_OPERATIONAL_P: gcry_ctl_cmds = 54;
pub const GCRYCTL_FIPS_MODE_P: gcry_ctl_cmds = 55;
pub const GCRYCTL_FORCE_FIPS_MODE: gcry_ctl_cmds = 56;
pub const GCRYCTL_SELFTEST: gcry_ctl_cmds = 57;
pub const GCRYCTL_DISABLE_HWF: gcry_ctl_cmds = 63;
pub const GCRYCTL_SET_ENFORCED_FIPS_FLAG: gcry_ctl_cmds = 64;
pub const GCRYCTL_SET_PREFERRED_RNG_TYPE: gcry_ctl_cmds = 65;
pub const GCRYCTL_GET_CURRENT_RNG_TYPE: gcry_ctl_cmds = 66;
pub const GCRYCTL_DISABLE_LOCKED_SECMEM: gcry_ctl_cmds = 67;
pub const GCRYCTL_DISABLE_PRIV_DROP: gcry_ctl_cmds = 68;
pub const GCRYCTL_SET_CCM_LENGTHS: gcry_ctl_cmds = 69;
pub const GCRYCTL_CLOSE_RANDOM_DEVICE: gcry_ctl_cmds = 70;
pub const GCRYCTL_INACTIVATE_FIPS_FLAG: gcry_ctl_cmds = 71;
pub const GCRYCTL_REACTIVATE_FIPS_FLAG: gcry_ctl_cmds = 72;
pub const GCRYCTL_SET_SBOX: gcry_ctl_cmds = 73;
pub const GCRYCTL_DRBG_REINIT: gcry_ctl_cmds = 74;
pub const GCRYCTL_SET_TAGLEN: gcry_ctl_cmds = 75;
pub const GCRYCTL_GET_TAGLEN: gcry_ctl_cmds = 76;
pub const GCRYCTL_REINIT_SYSCALL_CLAMP: gcry_ctl_cmds = 77;
pub const GCRYCTL_AUTO_EXPAND_SECMEM: gcry_ctl_cmds = 78;
pub const GCRYCTL_SET_ALLOW_WEAK_KEY: gcry_ctl_cmds = 79;
pub type gcry_ctl_cmds = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_control(CMD: gcry_ctl_cmds, ...) -> gcry_error_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_sexp
{
  _unused: [u8; 0],
}
pub type gcry_sexp_t = *mut gcry_sexp;
pub type GCRY_SEXP = *mut gcry_sexp;
pub const GCRYSEXP_FMT_DEFAULT: gcry_sexp_format = 0;
pub const GCRYSEXP_FMT_CANON: gcry_sexp_format = 1;
pub const GCRYSEXP_FMT_BASE64: gcry_sexp_format = 2;
pub const GCRYSEXP_FMT_ADVANCED: gcry_sexp_format = 3;
pub type gcry_sexp_format = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_sexp_new(
    retsexp: *mut gcry_sexp_t,
    buffer: *const ::std::os::raw::c_void,
    length: usize,
    autodetect: ::std::os::raw::c_int,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_sexp_create(
    retsexp: *mut gcry_sexp_t,
    buffer: *mut ::std::os::raw::c_void,
    length: usize,
    autodetect: ::std::os::raw::c_int,
    freefnc: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_sexp_sscan(
    retsexp: *mut gcry_sexp_t,
    erroff: *mut usize,
    buffer: *const ::std::os::raw::c_char,
    length: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_sexp_build(
    retsexp: *mut gcry_sexp_t,
    erroff: *mut usize,
    format: *const ::std::os::raw::c_char,
    ...
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_sexp_build_array(
    retsexp: *mut gcry_sexp_t,
    erroff: *mut usize,
    format: *const ::std::os::raw::c_char,
    arg_list: *mut *mut ::std::os::raw::c_void,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_sexp_release(sexp: gcry_sexp_t);
}
extern "C" {
  pub fn gcry_sexp_canon_len(
    buffer: *const ::std::os::raw::c_uchar,
    length: usize,
    erroff: *mut usize,
    errcode: *mut gcry_error_t,
  ) -> usize;
}
extern "C" {
  pub fn gcry_sexp_sprint(
    sexp: gcry_sexp_t,
    mode: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    maxlength: usize,
  ) -> usize;
}
extern "C" {
  pub fn gcry_sexp_dump(a: gcry_sexp_t);
}
extern "C" {
  pub fn gcry_sexp_cons(a: gcry_sexp_t, b: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_alist(array: *const gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_vlist(a: gcry_sexp_t, ...) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_append(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_prepend(a: gcry_sexp_t, n: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_find_token(
    list: gcry_sexp_t,
    tok: *const ::std::os::raw::c_char,
    toklen: usize,
  ) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_length(list: gcry_sexp_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_sexp_nth(list: gcry_sexp_t, number: ::std::os::raw::c_int) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_car(list: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_cdr(list: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_cadr(list: gcry_sexp_t) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_sexp_nth_data(
    list: gcry_sexp_t,
    number: ::std::os::raw::c_int,
    datalen: *mut usize,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_sexp_nth_buffer(
    list: gcry_sexp_t,
    number: ::std::os::raw::c_int,
    rlength: *mut usize,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_sexp_nth_string(
    list: gcry_sexp_t,
    number: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_sexp_nth_mpi(
    list: gcry_sexp_t,
    number: ::std::os::raw::c_int,
    mpifmt: ::std::os::raw::c_int,
  ) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_sexp_extract_param(
    sexp: gcry_sexp_t,
    path: *const ::std::os::raw::c_char,
    list: *const ::std::os::raw::c_char,
    ...
  ) -> gpg_error_t;
}
pub const GCRYMPI_FMT_NONE: gcry_mpi_format = 0;
pub const GCRYMPI_FMT_STD: gcry_mpi_format = 1;
pub const GCRYMPI_FMT_PGP: gcry_mpi_format = 2;
pub const GCRYMPI_FMT_SSH: gcry_mpi_format = 3;
pub const GCRYMPI_FMT_HEX: gcry_mpi_format = 4;
pub const GCRYMPI_FMT_USG: gcry_mpi_format = 5;
pub const GCRYMPI_FMT_OPAQUE: gcry_mpi_format = 8;
pub type gcry_mpi_format = ::std::os::raw::c_uint;
pub const GCRYMPI_FLAG_SECURE: gcry_mpi_flag = 1;
pub const GCRYMPI_FLAG_OPAQUE: gcry_mpi_flag = 2;
pub const GCRYMPI_FLAG_IMMUTABLE: gcry_mpi_flag = 4;
pub const GCRYMPI_FLAG_CONST: gcry_mpi_flag = 8;
pub const GCRYMPI_FLAG_USER1: gcry_mpi_flag = 256;
pub const GCRYMPI_FLAG_USER2: gcry_mpi_flag = 512;
pub const GCRYMPI_FLAG_USER3: gcry_mpi_flag = 1024;
pub const GCRYMPI_FLAG_USER4: gcry_mpi_flag = 2048;
pub type gcry_mpi_flag = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_mpi_new(nbits: ::std::os::raw::c_uint) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_snew(nbits: ::std::os::raw::c_uint) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_release(a: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_copy(a: gcry_mpi_t) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_snatch(w: gcry_mpi_t, u: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_set(w: gcry_mpi_t, u: gcry_mpi_t) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_set_ui(w: gcry_mpi_t, u: ::std::os::raw::c_ulong) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_get_ui(w: *mut ::std::os::raw::c_uint, u: gcry_mpi_t) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_mpi_swap(a: gcry_mpi_t, b: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_is_neg(a: gcry_mpi_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_neg(w: gcry_mpi_t, u: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_abs(w: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_cmp(u: gcry_mpi_t, v: gcry_mpi_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_cmp_ui(u: gcry_mpi_t, v: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_scan(
    ret_mpi: *mut gcry_mpi_t,
    format: gcry_mpi_format,
    buffer: *const ::std::os::raw::c_void,
    buflen: usize,
    nscanned: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mpi_print(
    format: gcry_mpi_format,
    buffer: *mut ::std::os::raw::c_uchar,
    buflen: usize,
    nwritten: *mut usize,
    a: gcry_mpi_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mpi_aprint(
    format: gcry_mpi_format,
    buffer: *mut *mut ::std::os::raw::c_uchar,
    nwritten: *mut usize,
    a: gcry_mpi_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mpi_dump(a: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_add(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_add_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn gcry_mpi_addm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_sub(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_sub_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn gcry_mpi_subm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_mul(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_mul_ui(w: gcry_mpi_t, u: gcry_mpi_t, v: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn gcry_mpi_mulm(w: gcry_mpi_t, u: gcry_mpi_t, v: gcry_mpi_t, m: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_mul_2exp(w: gcry_mpi_t, u: gcry_mpi_t, cnt: ::std::os::raw::c_ulong);
}
extern "C" {
  pub fn gcry_mpi_div(
    q: gcry_mpi_t,
    r: gcry_mpi_t,
    dividend: gcry_mpi_t,
    divisor: gcry_mpi_t,
    round: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn gcry_mpi_mod(r: gcry_mpi_t, dividend: gcry_mpi_t, divisor: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_powm(w: gcry_mpi_t, b: gcry_mpi_t, e: gcry_mpi_t, m: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_mpi_gcd(g: gcry_mpi_t, a: gcry_mpi_t, b: gcry_mpi_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_invm(x: gcry_mpi_t, a: gcry_mpi_t, m: gcry_mpi_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_point_new(nbits: ::std::os::raw::c_uint) -> gcry_mpi_point_t;
}
extern "C" {
  pub fn gcry_mpi_point_release(point: gcry_mpi_point_t);
}
extern "C" {
  pub fn gcry_mpi_point_copy(point: gcry_mpi_point_t) -> gcry_mpi_point_t;
}
extern "C" {
  pub fn gcry_mpi_point_get(x: gcry_mpi_t, y: gcry_mpi_t, z: gcry_mpi_t, point: gcry_mpi_point_t);
}
extern "C" {
  pub fn gcry_mpi_point_snatch_get(
    x: gcry_mpi_t,
    y: gcry_mpi_t,
    z: gcry_mpi_t,
    point: gcry_mpi_point_t,
  );
}
extern "C" {
  pub fn gcry_mpi_point_set(
    point: gcry_mpi_point_t,
    x: gcry_mpi_t,
    y: gcry_mpi_t,
    z: gcry_mpi_t,
  ) -> gcry_mpi_point_t;
}
extern "C" {
  pub fn gcry_mpi_point_snatch_set(
    point: gcry_mpi_point_t,
    x: gcry_mpi_t,
    y: gcry_mpi_t,
    z: gcry_mpi_t,
  ) -> gcry_mpi_point_t;
}
extern "C" {
  pub fn gcry_mpi_ec_new(
    r_ctx: *mut gcry_ctx_t,
    keyparam: gcry_sexp_t,
    curvename: *const ::std::os::raw::c_char,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_mpi_ec_get_mpi(
    name: *const ::std::os::raw::c_char,
    ctx: gcry_ctx_t,
    copy: ::std::os::raw::c_int,
  ) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_ec_get_point(
    name: *const ::std::os::raw::c_char,
    ctx: gcry_ctx_t,
    copy: ::std::os::raw::c_int,
  ) -> gcry_mpi_point_t;
}
extern "C" {
  pub fn gcry_mpi_ec_set_mpi(
    name: *const ::std::os::raw::c_char,
    newvalue: gcry_mpi_t,
    ctx: gcry_ctx_t,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_mpi_ec_set_point(
    name: *const ::std::os::raw::c_char,
    newvalue: gcry_mpi_point_t,
    ctx: gcry_ctx_t,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_mpi_ec_decode_point(
    result: gcry_mpi_point_t,
    value: gcry_mpi_t,
    ctx: gcry_ctx_t,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_mpi_ec_get_affine(
    x: gcry_mpi_t,
    y: gcry_mpi_t,
    point: gcry_mpi_point_t,
    ctx: gcry_ctx_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_ec_dup(w: gcry_mpi_point_t, u: gcry_mpi_point_t, ctx: gcry_ctx_t);
}
extern "C" {
  pub fn gcry_mpi_ec_add(
    w: gcry_mpi_point_t,
    u: gcry_mpi_point_t,
    v: gcry_mpi_point_t,
    ctx: gcry_ctx_t,
  );
}
extern "C" {
  pub fn gcry_mpi_ec_sub(
    w: gcry_mpi_point_t,
    u: gcry_mpi_point_t,
    v: gcry_mpi_point_t,
    ctx: gcry_ctx_t,
  );
}
extern "C" {
  pub fn gcry_mpi_ec_mul(w: gcry_mpi_point_t, n: gcry_mpi_t, u: gcry_mpi_point_t, ctx: gcry_ctx_t);
}
extern "C" {
  pub fn gcry_mpi_ec_curve_point(w: gcry_mpi_point_t, ctx: gcry_ctx_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_get_nbits(a: gcry_mpi_t) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_mpi_test_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mpi_set_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_clear_bit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_set_highbit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_clear_highbit(a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_rshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_lshift(x: gcry_mpi_t, a: gcry_mpi_t, n: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn gcry_mpi_set_opaque(
    a: gcry_mpi_t,
    p: *mut ::std::os::raw::c_void,
    nbits: ::std::os::raw::c_uint,
  ) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_set_opaque_copy(
    a: gcry_mpi_t,
    p: *const ::std::os::raw::c_void,
    nbits: ::std::os::raw::c_uint,
  ) -> gcry_mpi_t;
}
extern "C" {
  pub fn gcry_mpi_get_opaque(
    a: gcry_mpi_t,
    nbits: *mut ::std::os::raw::c_uint,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_mpi_set_flag(a: gcry_mpi_t, flag: gcry_mpi_flag);
}
extern "C" {
  pub fn gcry_mpi_clear_flag(a: gcry_mpi_t, flag: gcry_mpi_flag);
}
extern "C" {
  pub fn gcry_mpi_get_flag(a: gcry_mpi_t, flag: gcry_mpi_flag) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_cipher_handle
{
  _unused: [u8; 0],
}
pub type gcry_cipher_hd_t = *mut gcry_cipher_handle;
pub type GCRY_CIPHER_HD = *mut gcry_cipher_handle;
pub const GCRY_CIPHER_NONE: gcry_cipher_algos = 0;
pub const GCRY_CIPHER_IDEA: gcry_cipher_algos = 1;
pub const GCRY_CIPHER_3DES: gcry_cipher_algos = 2;
pub const GCRY_CIPHER_CAST5: gcry_cipher_algos = 3;
pub const GCRY_CIPHER_BLOWFISH: gcry_cipher_algos = 4;
pub const GCRY_CIPHER_SAFER_SK128: gcry_cipher_algos = 5;
pub const GCRY_CIPHER_DES_SK: gcry_cipher_algos = 6;
pub const GCRY_CIPHER_AES: gcry_cipher_algos = 7;
pub const GCRY_CIPHER_AES192: gcry_cipher_algos = 8;
pub const GCRY_CIPHER_AES256: gcry_cipher_algos = 9;
pub const GCRY_CIPHER_TWOFISH: gcry_cipher_algos = 10;
pub const GCRY_CIPHER_ARCFOUR: gcry_cipher_algos = 301;
pub const GCRY_CIPHER_DES: gcry_cipher_algos = 302;
pub const GCRY_CIPHER_TWOFISH128: gcry_cipher_algos = 303;
pub const GCRY_CIPHER_SERPENT128: gcry_cipher_algos = 304;
pub const GCRY_CIPHER_SERPENT192: gcry_cipher_algos = 305;
pub const GCRY_CIPHER_SERPENT256: gcry_cipher_algos = 306;
pub const GCRY_CIPHER_RFC2268_40: gcry_cipher_algos = 307;
pub const GCRY_CIPHER_RFC2268_128: gcry_cipher_algos = 308;
pub const GCRY_CIPHER_SEED: gcry_cipher_algos = 309;
pub const GCRY_CIPHER_CAMELLIA128: gcry_cipher_algos = 310;
pub const GCRY_CIPHER_CAMELLIA192: gcry_cipher_algos = 311;
pub const GCRY_CIPHER_CAMELLIA256: gcry_cipher_algos = 312;
pub const GCRY_CIPHER_SALSA20: gcry_cipher_algos = 313;
pub const GCRY_CIPHER_SALSA20R12: gcry_cipher_algos = 314;
pub const GCRY_CIPHER_GOST28147: gcry_cipher_algos = 315;
pub const GCRY_CIPHER_CHACHA20: gcry_cipher_algos = 316;
pub const GCRY_CIPHER_GOST28147_MESH: gcry_cipher_algos = 317;
pub const GCRY_CIPHER_SM4: gcry_cipher_algos = 318;
pub type gcry_cipher_algos = ::std::os::raw::c_uint;
pub const GCRY_CIPHER_MODE_NONE: gcry_cipher_modes = 0;
pub const GCRY_CIPHER_MODE_ECB: gcry_cipher_modes = 1;
pub const GCRY_CIPHER_MODE_CFB: gcry_cipher_modes = 2;
pub const GCRY_CIPHER_MODE_CBC: gcry_cipher_modes = 3;
pub const GCRY_CIPHER_MODE_STREAM: gcry_cipher_modes = 4;
pub const GCRY_CIPHER_MODE_OFB: gcry_cipher_modes = 5;
pub const GCRY_CIPHER_MODE_CTR: gcry_cipher_modes = 6;
pub const GCRY_CIPHER_MODE_AESWRAP: gcry_cipher_modes = 7;
pub const GCRY_CIPHER_MODE_CCM: gcry_cipher_modes = 8;
pub const GCRY_CIPHER_MODE_GCM: gcry_cipher_modes = 9;
pub const GCRY_CIPHER_MODE_POLY1305: gcry_cipher_modes = 10;
pub const GCRY_CIPHER_MODE_OCB: gcry_cipher_modes = 11;
pub const GCRY_CIPHER_MODE_CFB8: gcry_cipher_modes = 12;
pub const GCRY_CIPHER_MODE_XTS: gcry_cipher_modes = 13;
pub const GCRY_CIPHER_MODE_EAX: gcry_cipher_modes = 14;
pub type gcry_cipher_modes = ::std::os::raw::c_uint;
pub const GCRY_CIPHER_SECURE: gcry_cipher_flags = 1;
pub const GCRY_CIPHER_ENABLE_SYNC: gcry_cipher_flags = 2;
pub const GCRY_CIPHER_CBC_CTS: gcry_cipher_flags = 4;
pub const GCRY_CIPHER_CBC_MAC: gcry_cipher_flags = 8;
pub type gcry_cipher_flags = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_cipher_open(
    handle: *mut gcry_cipher_hd_t,
    algo: ::std::os::raw::c_int,
    mode: ::std::os::raw::c_int,
    flags: ::std::os::raw::c_uint,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_close(h: gcry_cipher_hd_t);
}
extern "C" {
  pub fn gcry_cipher_ctl(
    h: gcry_cipher_hd_t,
    cmd: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    buflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_info(
    h: gcry_cipher_hd_t,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_algo_info(
    algo: ::std::os::raw::c_int,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_algo_name(algorithm: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_cipher_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_cipher_mode_from_oid(string: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_cipher_encrypt(
    h: gcry_cipher_hd_t,
    out: *mut ::std::os::raw::c_void,
    outsize: usize,
    in_: *const ::std::os::raw::c_void,
    inlen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_decrypt(
    h: gcry_cipher_hd_t,
    out: *mut ::std::os::raw::c_void,
    outsize: usize,
    in_: *const ::std::os::raw::c_void,
    inlen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_setkey(
    hd: gcry_cipher_hd_t,
    key: *const ::std::os::raw::c_void,
    keylen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_setiv(
    hd: gcry_cipher_hd_t,
    iv: *const ::std::os::raw::c_void,
    ivlen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_authenticate(
    hd: gcry_cipher_hd_t,
    abuf: *const ::std::os::raw::c_void,
    abuflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_gettag(
    hd: gcry_cipher_hd_t,
    outtag: *mut ::std::os::raw::c_void,
    taglen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_checktag(
    hd: gcry_cipher_hd_t,
    intag: *const ::std::os::raw::c_void,
    taglen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_cipher_setctr(
    hd: gcry_cipher_hd_t,
    ctr: *const ::std::os::raw::c_void,
    ctrlen: usize,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_cipher_get_algo_keylen(algo: ::std::os::raw::c_int) -> usize;
}
extern "C" {
  pub fn gcry_cipher_get_algo_blklen(algo: ::std::os::raw::c_int) -> usize;
}
pub const GCRY_PK_RSA: gcry_pk_algos = 1;
pub const GCRY_PK_RSA_E: gcry_pk_algos = 2;
pub const GCRY_PK_RSA_S: gcry_pk_algos = 3;
pub const GCRY_PK_ELG_E: gcry_pk_algos = 16;
pub const GCRY_PK_DSA: gcry_pk_algos = 17;
pub const GCRY_PK_ECC: gcry_pk_algos = 18;
pub const GCRY_PK_ELG: gcry_pk_algos = 20;
pub const GCRY_PK_ECDSA: gcry_pk_algos = 301;
pub const GCRY_PK_ECDH: gcry_pk_algos = 302;
pub const GCRY_PK_EDDSA: gcry_pk_algos = 303;
pub type gcry_pk_algos = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_pk_encrypt(
    result: *mut gcry_sexp_t,
    data: gcry_sexp_t,
    pkey: gcry_sexp_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_decrypt(
    result: *mut gcry_sexp_t,
    data: gcry_sexp_t,
    skey: gcry_sexp_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_sign(
    result: *mut gcry_sexp_t,
    data: gcry_sexp_t,
    skey: gcry_sexp_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_verify(sigval: gcry_sexp_t, data: gcry_sexp_t, pkey: gcry_sexp_t) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_testkey(key: gcry_sexp_t) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_genkey(r_key: *mut gcry_sexp_t, s_parms: gcry_sexp_t) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_ctl(
    cmd: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    buflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_algo_info(
    algo: ::std::os::raw::c_int,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_pk_algo_name(algorithm: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_pk_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_pk_get_nbits(key: gcry_sexp_t) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_pk_get_keygrip(
    key: gcry_sexp_t,
    array: *mut ::std::os::raw::c_uchar,
  ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn gcry_pk_get_curve(
    key: gcry_sexp_t,
    iterator: ::std::os::raw::c_int,
    r_nbits: *mut ::std::os::raw::c_uint,
  ) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_pk_get_param(
    algo: ::std::os::raw::c_int,
    name: *const ::std::os::raw::c_char,
  ) -> gcry_sexp_t;
}
extern "C" {
  pub fn gcry_pubkey_get_sexp(
    r_sexp: *mut gcry_sexp_t,
    mode: ::std::os::raw::c_int,
    ctx: gcry_ctx_t,
  ) -> gcry_error_t;
}
pub const GCRY_ECC_CURVE25519: gcry_ecc_curves = 1;
pub const GCRY_ECC_CURVE448: gcry_ecc_curves = 2;
pub type gcry_ecc_curves = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_ecc_get_algo_keylen(curveid: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_ecc_mul_point(
    curveid: ::std::os::raw::c_int,
    result: *mut ::std::os::raw::c_uchar,
    scalar: *const ::std::os::raw::c_uchar,
    point: *const ::std::os::raw::c_uchar,
  ) -> gpg_error_t;
}
pub const GCRY_MD_NONE: gcry_md_algos = 0;
pub const GCRY_MD_MD5: gcry_md_algos = 1;
pub const GCRY_MD_SHA1: gcry_md_algos = 2;
pub const GCRY_MD_RMD160: gcry_md_algos = 3;
pub const GCRY_MD_MD2: gcry_md_algos = 5;
pub const GCRY_MD_TIGER: gcry_md_algos = 6;
pub const GCRY_MD_HAVAL: gcry_md_algos = 7;
pub const GCRY_MD_SHA256: gcry_md_algos = 8;
pub const GCRY_MD_SHA384: gcry_md_algos = 9;
pub const GCRY_MD_SHA512: gcry_md_algos = 10;
pub const GCRY_MD_SHA224: gcry_md_algos = 11;
pub const GCRY_MD_MD4: gcry_md_algos = 301;
pub const GCRY_MD_CRC32: gcry_md_algos = 302;
pub const GCRY_MD_CRC32_RFC1510: gcry_md_algos = 303;
pub const GCRY_MD_CRC24_RFC2440: gcry_md_algos = 304;
pub const GCRY_MD_WHIRLPOOL: gcry_md_algos = 305;
pub const GCRY_MD_TIGER1: gcry_md_algos = 306;
pub const GCRY_MD_TIGER2: gcry_md_algos = 307;
pub const GCRY_MD_GOSTR3411_94: gcry_md_algos = 308;
pub const GCRY_MD_STRIBOG256: gcry_md_algos = 309;
pub const GCRY_MD_STRIBOG512: gcry_md_algos = 310;
pub const GCRY_MD_GOSTR3411_CP: gcry_md_algos = 311;
pub const GCRY_MD_SHA3_224: gcry_md_algos = 312;
pub const GCRY_MD_SHA3_256: gcry_md_algos = 313;
pub const GCRY_MD_SHA3_384: gcry_md_algos = 314;
pub const GCRY_MD_SHA3_512: gcry_md_algos = 315;
pub const GCRY_MD_SHAKE128: gcry_md_algos = 316;
pub const GCRY_MD_SHAKE256: gcry_md_algos = 317;
pub const GCRY_MD_BLAKE2B_512: gcry_md_algos = 318;
pub const GCRY_MD_BLAKE2B_384: gcry_md_algos = 319;
pub const GCRY_MD_BLAKE2B_256: gcry_md_algos = 320;
pub const GCRY_MD_BLAKE2B_160: gcry_md_algos = 321;
pub const GCRY_MD_BLAKE2S_256: gcry_md_algos = 322;
pub const GCRY_MD_BLAKE2S_224: gcry_md_algos = 323;
pub const GCRY_MD_BLAKE2S_160: gcry_md_algos = 324;
pub const GCRY_MD_BLAKE2S_128: gcry_md_algos = 325;
pub const GCRY_MD_SM3: gcry_md_algos = 326;
pub const GCRY_MD_SHA512_256: gcry_md_algos = 327;
pub const GCRY_MD_SHA512_224: gcry_md_algos = 328;
pub type gcry_md_algos = ::std::os::raw::c_uint;
pub const GCRY_MD_FLAG_SECURE: gcry_md_flags = 1;
pub const GCRY_MD_FLAG_HMAC: gcry_md_flags = 2;
pub const GCRY_MD_FLAG_BUGEMU1: gcry_md_flags = 256;
pub type gcry_md_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_md_context
{
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_md_handle
{
  pub ctx: *mut gcry_md_context,
  pub bufpos: ::std::os::raw::c_int,
  pub bufsize: ::std::os::raw::c_int,
  pub buf: [::std::os::raw::c_uchar; 1usize],
}
#[test]
fn bindgen_test_layout_gcry_md_handle()
{
  assert_eq!(
    ::std::mem::size_of::<gcry_md_handle>(),
    24usize,
    concat!("Size of: ", stringify!(gcry_md_handle))
  );
  assert_eq!(
    ::std::mem::align_of::<gcry_md_handle>(),
    8usize,
    concat!("Alignment of ", stringify!(gcry_md_handle))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_md_handle>())).ctx as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_md_handle),
      "::",
      stringify!(ctx)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_md_handle>())).bufpos as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_md_handle),
      "::",
      stringify!(bufpos)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_md_handle>())).bufsize as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_md_handle),
      "::",
      stringify!(bufsize)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<gcry_md_handle>())).buf as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(gcry_md_handle),
      "::",
      stringify!(buf)
    )
  );
}
pub type gcry_md_hd_t = *mut gcry_md_handle;
pub type GCRY_MD_HD = *mut gcry_md_handle;
extern "C" {
  pub fn gcry_md_open(
    h: *mut gcry_md_hd_t,
    algo: ::std::os::raw::c_int,
    flags: ::std::os::raw::c_uint,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_close(hd: gcry_md_hd_t);
}
extern "C" {
  pub fn gcry_md_enable(hd: gcry_md_hd_t, algo: ::std::os::raw::c_int) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_copy(bhd: *mut gcry_md_hd_t, ahd: gcry_md_hd_t) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_reset(hd: gcry_md_hd_t);
}
extern "C" {
  pub fn gcry_md_ctl(
    hd: gcry_md_hd_t,
    cmd: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    buflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_write(hd: gcry_md_hd_t, buffer: *const ::std::os::raw::c_void, length: usize);
}
extern "C" {
  pub fn gcry_md_read(
    hd: gcry_md_hd_t,
    algo: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
  pub fn gcry_md_extract(
    hd: gcry_md_hd_t,
    algo: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    length: usize,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_md_hash_buffer(
    algo: ::std::os::raw::c_int,
    digest: *mut ::std::os::raw::c_void,
    buffer: *const ::std::os::raw::c_void,
    length: usize,
  );
}
extern "C" {
  pub fn gcry_md_hash_buffers(
    algo: ::std::os::raw::c_int,
    flags: ::std::os::raw::c_uint,
    digest: *mut ::std::os::raw::c_void,
    iov: *const gcry_buffer_t,
    iovcnt: ::std::os::raw::c_int,
  ) -> gpg_error_t;
}
extern "C" {
  pub fn gcry_md_get_algo(hd: gcry_md_hd_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_md_get_algo_dlen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_md_is_enabled(a: gcry_md_hd_t, algo: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_md_is_secure(a: gcry_md_hd_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_md_info(
    h: gcry_md_hd_t,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_algo_info(
    algo: ::std::os::raw::c_int,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_algo_name(algo: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_md_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_md_setkey(
    hd: gcry_md_hd_t,
    key: *const ::std::os::raw::c_void,
    keylen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_md_debug(hd: gcry_md_hd_t, suffix: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gcry_mac_handle
{
  _unused: [u8; 0],
}
pub type gcry_mac_hd_t = *mut gcry_mac_handle;
pub const GCRY_MAC_NONE: gcry_mac_algos = 0;
pub const GCRY_MAC_GOST28147_IMIT: gcry_mac_algos = 1;
pub const GCRY_MAC_HMAC_SHA256: gcry_mac_algos = 101;
pub const GCRY_MAC_HMAC_SHA224: gcry_mac_algos = 102;
pub const GCRY_MAC_HMAC_SHA512: gcry_mac_algos = 103;
pub const GCRY_MAC_HMAC_SHA384: gcry_mac_algos = 104;
pub const GCRY_MAC_HMAC_SHA1: gcry_mac_algos = 105;
pub const GCRY_MAC_HMAC_MD5: gcry_mac_algos = 106;
pub const GCRY_MAC_HMAC_MD4: gcry_mac_algos = 107;
pub const GCRY_MAC_HMAC_RMD160: gcry_mac_algos = 108;
pub const GCRY_MAC_HMAC_TIGER1: gcry_mac_algos = 109;
pub const GCRY_MAC_HMAC_WHIRLPOOL: gcry_mac_algos = 110;
pub const GCRY_MAC_HMAC_GOSTR3411_94: gcry_mac_algos = 111;
pub const GCRY_MAC_HMAC_STRIBOG256: gcry_mac_algos = 112;
pub const GCRY_MAC_HMAC_STRIBOG512: gcry_mac_algos = 113;
pub const GCRY_MAC_HMAC_MD2: gcry_mac_algos = 114;
pub const GCRY_MAC_HMAC_SHA3_224: gcry_mac_algos = 115;
pub const GCRY_MAC_HMAC_SHA3_256: gcry_mac_algos = 116;
pub const GCRY_MAC_HMAC_SHA3_384: gcry_mac_algos = 117;
pub const GCRY_MAC_HMAC_SHA3_512: gcry_mac_algos = 118;
pub const GCRY_MAC_HMAC_GOSTR3411_CP: gcry_mac_algos = 119;
pub const GCRY_MAC_HMAC_BLAKE2B_512: gcry_mac_algos = 120;
pub const GCRY_MAC_HMAC_BLAKE2B_384: gcry_mac_algos = 121;
pub const GCRY_MAC_HMAC_BLAKE2B_256: gcry_mac_algos = 122;
pub const GCRY_MAC_HMAC_BLAKE2B_160: gcry_mac_algos = 123;
pub const GCRY_MAC_HMAC_BLAKE2S_256: gcry_mac_algos = 124;
pub const GCRY_MAC_HMAC_BLAKE2S_224: gcry_mac_algos = 125;
pub const GCRY_MAC_HMAC_BLAKE2S_160: gcry_mac_algos = 126;
pub const GCRY_MAC_HMAC_BLAKE2S_128: gcry_mac_algos = 127;
pub const GCRY_MAC_HMAC_SM3: gcry_mac_algos = 128;
pub const GCRY_MAC_HMAC_SHA512_256: gcry_mac_algos = 129;
pub const GCRY_MAC_HMAC_SHA512_224: gcry_mac_algos = 130;
pub const GCRY_MAC_CMAC_AES: gcry_mac_algos = 201;
pub const GCRY_MAC_CMAC_3DES: gcry_mac_algos = 202;
pub const GCRY_MAC_CMAC_CAMELLIA: gcry_mac_algos = 203;
pub const GCRY_MAC_CMAC_CAST5: gcry_mac_algos = 204;
pub const GCRY_MAC_CMAC_BLOWFISH: gcry_mac_algos = 205;
pub const GCRY_MAC_CMAC_TWOFISH: gcry_mac_algos = 206;
pub const GCRY_MAC_CMAC_SERPENT: gcry_mac_algos = 207;
pub const GCRY_MAC_CMAC_SEED: gcry_mac_algos = 208;
pub const GCRY_MAC_CMAC_RFC2268: gcry_mac_algos = 209;
pub const GCRY_MAC_CMAC_IDEA: gcry_mac_algos = 210;
pub const GCRY_MAC_CMAC_GOST28147: gcry_mac_algos = 211;
pub const GCRY_MAC_CMAC_SM4: gcry_mac_algos = 212;
pub const GCRY_MAC_GMAC_AES: gcry_mac_algos = 401;
pub const GCRY_MAC_GMAC_CAMELLIA: gcry_mac_algos = 402;
pub const GCRY_MAC_GMAC_TWOFISH: gcry_mac_algos = 403;
pub const GCRY_MAC_GMAC_SERPENT: gcry_mac_algos = 404;
pub const GCRY_MAC_GMAC_SEED: gcry_mac_algos = 405;
pub const GCRY_MAC_POLY1305: gcry_mac_algos = 501;
pub const GCRY_MAC_POLY1305_AES: gcry_mac_algos = 502;
pub const GCRY_MAC_POLY1305_CAMELLIA: gcry_mac_algos = 503;
pub const GCRY_MAC_POLY1305_TWOFISH: gcry_mac_algos = 504;
pub const GCRY_MAC_POLY1305_SERPENT: gcry_mac_algos = 505;
pub const GCRY_MAC_POLY1305_SEED: gcry_mac_algos = 506;
pub type gcry_mac_algos = ::std::os::raw::c_uint;
pub const GCRY_MAC_FLAG_SECURE: gcry_mac_flags = 1;
pub type gcry_mac_flags = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_mac_open(
    handle: *mut gcry_mac_hd_t,
    algo: ::std::os::raw::c_int,
    flags: ::std::os::raw::c_uint,
    ctx: gcry_ctx_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_close(h: gcry_mac_hd_t);
}
extern "C" {
  pub fn gcry_mac_ctl(
    h: gcry_mac_hd_t,
    cmd: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    buflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_algo_info(
    algo: ::std::os::raw::c_int,
    what: ::std::os::raw::c_int,
    buffer: *mut ::std::os::raw::c_void,
    nbytes: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_setkey(
    hd: gcry_mac_hd_t,
    key: *const ::std::os::raw::c_void,
    keylen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_setiv(
    hd: gcry_mac_hd_t,
    iv: *const ::std::os::raw::c_void,
    ivlen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_write(
    hd: gcry_mac_hd_t,
    buffer: *const ::std::os::raw::c_void,
    length: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_read(
    hd: gcry_mac_hd_t,
    buffer: *mut ::std::os::raw::c_void,
    buflen: *mut usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_verify(
    hd: gcry_mac_hd_t,
    buffer: *const ::std::os::raw::c_void,
    buflen: usize,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_mac_get_algo(hd: gcry_mac_hd_t) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn gcry_mac_get_algo_maclen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_mac_get_algo_keylen(algo: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn gcry_mac_algo_name(algorithm: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_mac_map_name(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub const GCRY_KDF_NONE: gcry_kdf_algos = 0;
pub const GCRY_KDF_SIMPLE_S2K: gcry_kdf_algos = 16;
pub const GCRY_KDF_SALTED_S2K: gcry_kdf_algos = 17;
pub const GCRY_KDF_ITERSALTED_S2K: gcry_kdf_algos = 19;
pub const GCRY_KDF_PBKDF1: gcry_kdf_algos = 33;
pub const GCRY_KDF_PBKDF2: gcry_kdf_algos = 34;
pub const GCRY_KDF_SCRYPT: gcry_kdf_algos = 48;
pub type gcry_kdf_algos = ::std::os::raw::c_uint;
extern "C" {
  pub fn gcry_kdf_derive(
    passphrase: *const ::std::os::raw::c_void,
    passphraselen: usize,
    algo: ::std::os::raw::c_int,
    subalgo: ::std::os::raw::c_int,
    salt: *const ::std::os::raw::c_void,
    saltlen: usize,
    iterations: ::std::os::raw::c_ulong,
    keysize: usize,
    keybuffer: *mut ::std::os::raw::c_void,
  ) -> gpg_error_t;
}
pub const GCRY_RNG_TYPE_STANDARD: gcry_rng_types = 1;
pub const GCRY_RNG_TYPE_FIPS: gcry_rng_types = 2;
pub const GCRY_RNG_TYPE_SYSTEM: gcry_rng_types = 3;
pub type gcry_rng_types = ::std::os::raw::c_uint;
pub const GCRY_WEAK_RANDOM: gcry_random_level = 0;
pub const GCRY_STRONG_RANDOM: gcry_random_level = 1;
pub const GCRY_VERY_STRONG_RANDOM: gcry_random_level = 2;
pub type gcry_random_level = ::std::os::raw::c_uint;
pub use self::gcry_random_level as gcry_random_level_t;
extern "C" {
  pub fn gcry_randomize(
    buffer: *mut ::std::os::raw::c_void,
    length: usize,
    level: gcry_random_level,
  );
}
extern "C" {
  pub fn gcry_random_add_bytes(
    buffer: *const ::std::os::raw::c_void,
    length: usize,
    quality: ::std::os::raw::c_int,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_random_bytes(nbytes: usize, level: gcry_random_level) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_random_bytes_secure(
    nbytes: usize,
    level: gcry_random_level,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_mpi_randomize(w: gcry_mpi_t, nbits: ::std::os::raw::c_uint, level: gcry_random_level);
}
extern "C" {
  pub fn gcry_create_nonce(buffer: *mut ::std::os::raw::c_void, length: usize);
}
pub type gcry_prime_check_func_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg: *mut ::std::os::raw::c_void,
    mode: ::std::os::raw::c_int,
    candidate: gcry_mpi_t,
  ) -> ::std::os::raw::c_int,
>;
extern "C" {
  pub fn gcry_prime_generate(
    prime: *mut gcry_mpi_t,
    prime_bits: ::std::os::raw::c_uint,
    factor_bits: ::std::os::raw::c_uint,
    factors: *mut *mut gcry_mpi_t,
    cb_func: gcry_prime_check_func_t,
    cb_arg: *mut ::std::os::raw::c_void,
    random_level: gcry_random_level_t,
    flags: ::std::os::raw::c_uint,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_prime_group_generator(
    r_g: *mut gcry_mpi_t,
    prime: gcry_mpi_t,
    factors: *mut gcry_mpi_t,
    start_g: gcry_mpi_t,
  ) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_prime_release_factors(factors: *mut gcry_mpi_t);
}
extern "C" {
  pub fn gcry_prime_check(x: gcry_mpi_t, flags: ::std::os::raw::c_uint) -> gcry_error_t;
}
extern "C" {
  pub fn gcry_ctx_release(ctx: gcry_ctx_t);
}
extern "C" {
  pub fn gcry_log_debug(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn gcry_log_debughex(
    text: *const ::std::os::raw::c_char,
    buffer: *const ::std::os::raw::c_void,
    length: usize,
  );
}
extern "C" {
  pub fn gcry_log_debugmpi(text: *const ::std::os::raw::c_char, mpi: gcry_mpi_t);
}
extern "C" {
  pub fn gcry_log_debugpnt(
    text: *const ::std::os::raw::c_char,
    point: gcry_mpi_point_t,
    ctx: gcry_ctx_t,
  );
}
extern "C" {
  pub fn gcry_log_debugsxp(text: *const ::std::os::raw::c_char, sexp: gcry_sexp_t);
}
extern "C" {
  pub fn gcry_get_config(
    mode: ::std::os::raw::c_int,
    what: *const ::std::os::raw::c_char,
  ) -> *mut ::std::os::raw::c_char;
}
pub const GCRY_LOG_CONT: gcry_log_levels = 0;
pub const GCRY_LOG_INFO: gcry_log_levels = 10;
pub const GCRY_LOG_WARN: gcry_log_levels = 20;
pub const GCRY_LOG_ERROR: gcry_log_levels = 30;
pub const GCRY_LOG_FATAL: gcry_log_levels = 40;
pub const GCRY_LOG_BUG: gcry_log_levels = 50;
pub const GCRY_LOG_DEBUG: gcry_log_levels = 100;
pub type gcry_log_levels = ::std::os::raw::c_uint;
pub type gcry_handler_progress_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut ::std::os::raw::c_void,
    arg2: *const ::std::os::raw::c_char,
    arg3: ::std::os::raw::c_int,
    arg4: ::std::os::raw::c_int,
    arg5: ::std::os::raw::c_int,
  ),
>;
pub type gcry_handler_alloc_t =
  ::std::option::Option<unsafe extern "C" fn(n: usize) -> *mut ::std::os::raw::c_void>;
pub type gcry_handler_secure_check_t = ::std::option::Option<
  unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type gcry_handler_realloc_t = ::std::option::Option<
  unsafe extern "C" fn(p: *mut ::std::os::raw::c_void, n: usize) -> *mut ::std::os::raw::c_void,
>;
pub type gcry_handler_free_t =
  ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type gcry_handler_no_mem_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut ::std::os::raw::c_void,
    arg2: usize,
    arg3: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int,
>;
pub type gcry_handler_error_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut ::std::os::raw::c_void,
    arg2: ::std::os::raw::c_int,
    arg3: *const ::std::os::raw::c_char,
  ),
>;
pub type gcry_handler_log_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut ::std::os::raw::c_void,
    arg2: ::std::os::raw::c_int,
    arg3: *const ::std::os::raw::c_char,
    arg4: *mut __va_list_tag,
  ),
>;
extern "C" {
  pub fn gcry_set_progress_handler(
    cb: gcry_handler_progress_t,
    cb_data: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn gcry_set_allocation_handler(
    func_alloc: gcry_handler_alloc_t,
    func_alloc_secure: gcry_handler_alloc_t,
    func_secure_check: gcry_handler_secure_check_t,
    func_realloc: gcry_handler_realloc_t,
    func_free: gcry_handler_free_t,
  );
}
extern "C" {
  pub fn gcry_set_outofcore_handler(h: gcry_handler_no_mem_t, opaque: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gcry_set_fatalerror_handler(
    fnc: gcry_handler_error_t,
    opaque: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn gcry_set_log_handler(f: gcry_handler_log_t, opaque: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gcry_set_gettext_handler(
    f: ::std::option::Option<
      unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
  );
}
extern "C" {
  pub fn gcry_malloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_calloc(n: usize, m: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_malloc_secure(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_calloc_secure(n: usize, m: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_realloc(a: *mut ::std::os::raw::c_void, n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_strdup(string: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_xmalloc(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_xcalloc(n: usize, m: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_xmalloc_secure(n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_xcalloc_secure(n: usize, m: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_xrealloc(a: *mut ::std::os::raw::c_void, n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn gcry_xstrdup(a: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn gcry_free(a: *mut ::std::os::raw::c_void);
}
extern "C" {
  pub fn gcry_is_secure(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag
{
  pub gp_offset: ::std::os::raw::c_uint,
  pub fp_offset: ::std::os::raw::c_uint,
  pub overflow_arg_area: *mut ::std::os::raw::c_void,
  pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag()
{
  assert_eq!(
    ::std::mem::size_of::<__va_list_tag>(),
    24usize,
    concat!("Size of: ", stringify!(__va_list_tag))
  );
  assert_eq!(
    ::std::mem::align_of::<__va_list_tag>(),
    8usize,
    concat!("Alignment of ", stringify!(__va_list_tag))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(gp_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(fp_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(overflow_arg_area)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(__va_list_tag),
      "::",
      stringify!(reg_save_area)
    )
  );
}
